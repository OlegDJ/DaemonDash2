//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/Player Input/Player Input Scheme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputScheme: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputScheme()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input Scheme"",
    ""maps"": [
        {
            ""name"": ""Controls"",
            ""id"": ""997cc764-85d8-41e9-a84b-c80911730c94"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5371732e-64e1-4f68-b403-14680de2a1f6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""58ba4233-f9bf-4975-8d65-dd44bc97ffe5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""dcdbc562-384b-49e1-a0c4-0d8653bf5dc3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""87606fe8-9ce7-4274-87e5-22e14263722c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""93e3b25c-6d31-4420-83d7-e0b9e925fca3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""97f87e9c-3290-41d6-8b56-3d33589d65dd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7479ac0b-b02d-4b67-93ed-ec4fd43f91d9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c710af19-034c-4f0d-ba96-4cb50e28f7b0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e76c42ee-f700-4305-8e93-599be1afe6c2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d15a6cb6-22b7-46b5-8078-0274df7b059f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(max=1)"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2127f194-3fda-4c31-8189-df931a1ed76e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0392324f-d6a9-4f3c-849d-414768eb66dd"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(max=1),ScaleVector2(x=15,y=15)"",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a182632-9ba4-41d8-9e07-264ea9e20f56"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d17168e4-b8fc-4e4a-a701-24cc04079c16"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1b1743f-0e8a-4e18-90a2-ee8ef3666df1"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bbd8ea4-494e-4527-8b83-e34165878424"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Fighting"",
            ""id"": ""a6531fe9-c26b-4dc9-9036-fd8d1b19ea1a"",
            ""actions"": [
                {
                    ""name"": ""Simple Punch"",
                    ""type"": ""Button"",
                    ""id"": ""451ea876-757b-4ce3-aef6-4444860a7af5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge Dash"",
                    ""type"": ""Button"",
                    ""id"": ""b54ae82b-8443-4e00-87a6-1b64919b732a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Simple Block"",
                    ""type"": ""Button"",
                    ""id"": ""6255035d-c2df-4d0c-8504-38130d587884"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d9be74d-0514-4c42-a59c-166ad13fe910"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Simple Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""536dc438-6133-4abc-885e-d26a97a2b8e2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca565bb6-a38a-4bb4-b17f-6732830736c2"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Simple Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controls
        m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
        m_Controls_Movement = m_Controls.FindAction("Movement", throwIfNotFound: true);
        m_Controls_Rotation = m_Controls.FindAction("Rotation", throwIfNotFound: true);
        m_Controls_Run = m_Controls.FindAction("Run", throwIfNotFound: true);
        m_Controls_Crouch = m_Controls.FindAction("Crouch", throwIfNotFound: true);
        // Fighting
        m_Fighting = asset.FindActionMap("Fighting", throwIfNotFound: true);
        m_Fighting_SimplePunch = m_Fighting.FindAction("Simple Punch", throwIfNotFound: true);
        m_Fighting_DodgeDash = m_Fighting.FindAction("Dodge Dash", throwIfNotFound: true);
        m_Fighting_SimpleBlock = m_Fighting.FindAction("Simple Block", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controls
    private readonly InputActionMap m_Controls;
    private List<IControlsActions> m_ControlsActionsCallbackInterfaces = new List<IControlsActions>();
    private readonly InputAction m_Controls_Movement;
    private readonly InputAction m_Controls_Rotation;
    private readonly InputAction m_Controls_Run;
    private readonly InputAction m_Controls_Crouch;
    public struct ControlsActions
    {
        private @PlayerInputScheme m_Wrapper;
        public ControlsActions(@PlayerInputScheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Controls_Movement;
        public InputAction @Rotation => m_Wrapper.m_Controls_Rotation;
        public InputAction @Run => m_Wrapper.m_Controls_Run;
        public InputAction @Crouch => m_Wrapper.m_Controls_Crouch;
        public InputActionMap Get() { return m_Wrapper.m_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void AddCallbacks(IControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
        }

        private void UnregisterCallbacks(IControlsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
        }

        public void RemoveCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlsActions @Controls => new ControlsActions(this);

    // Fighting
    private readonly InputActionMap m_Fighting;
    private List<IFightingActions> m_FightingActionsCallbackInterfaces = new List<IFightingActions>();
    private readonly InputAction m_Fighting_SimplePunch;
    private readonly InputAction m_Fighting_DodgeDash;
    private readonly InputAction m_Fighting_SimpleBlock;
    public struct FightingActions
    {
        private @PlayerInputScheme m_Wrapper;
        public FightingActions(@PlayerInputScheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @SimplePunch => m_Wrapper.m_Fighting_SimplePunch;
        public InputAction @DodgeDash => m_Wrapper.m_Fighting_DodgeDash;
        public InputAction @SimpleBlock => m_Wrapper.m_Fighting_SimpleBlock;
        public InputActionMap Get() { return m_Wrapper.m_Fighting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FightingActions set) { return set.Get(); }
        public void AddCallbacks(IFightingActions instance)
        {
            if (instance == null || m_Wrapper.m_FightingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FightingActionsCallbackInterfaces.Add(instance);
            @SimplePunch.started += instance.OnSimplePunch;
            @SimplePunch.performed += instance.OnSimplePunch;
            @SimplePunch.canceled += instance.OnSimplePunch;
            @DodgeDash.started += instance.OnDodgeDash;
            @DodgeDash.performed += instance.OnDodgeDash;
            @DodgeDash.canceled += instance.OnDodgeDash;
            @SimpleBlock.started += instance.OnSimpleBlock;
            @SimpleBlock.performed += instance.OnSimpleBlock;
            @SimpleBlock.canceled += instance.OnSimpleBlock;
        }

        private void UnregisterCallbacks(IFightingActions instance)
        {
            @SimplePunch.started -= instance.OnSimplePunch;
            @SimplePunch.performed -= instance.OnSimplePunch;
            @SimplePunch.canceled -= instance.OnSimplePunch;
            @DodgeDash.started -= instance.OnDodgeDash;
            @DodgeDash.performed -= instance.OnDodgeDash;
            @DodgeDash.canceled -= instance.OnDodgeDash;
            @SimpleBlock.started -= instance.OnSimpleBlock;
            @SimpleBlock.performed -= instance.OnSimpleBlock;
            @SimpleBlock.canceled -= instance.OnSimpleBlock;
        }

        public void RemoveCallbacks(IFightingActions instance)
        {
            if (m_Wrapper.m_FightingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFightingActions instance)
        {
            foreach (var item in m_Wrapper.m_FightingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FightingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FightingActions @Fighting => new FightingActions(this);
    public interface IControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
    }
    public interface IFightingActions
    {
        void OnSimplePunch(InputAction.CallbackContext context);
        void OnDodgeDash(InputAction.CallbackContext context);
        void OnSimpleBlock(InputAction.CallbackContext context);
    }
}
